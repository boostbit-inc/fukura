name: Release

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    # To add Windows/macOS installers later, extend the matrix below and
    # restore the platform-specific signing steps.
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            shell: bash
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            shell: bash
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.shell }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          echo "${HOME}/.cargo/bin" >> $GITHUB_PATH
          echo "Rust installed successfully"

      - name: Install cross-compilation toolchains
        run: |
          # Install cross-compilation toolchains for aarch64
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          echo "Cross-compilation toolchains installed successfully"

      - name: Install cargo-dist
        run: |
          cargo install cargo-dist --locked
          echo "${HOME}/.cargo/bin" >> $GITHUB_PATH
          echo "cargo-dist latest version installed successfully"

      - name: Build & Test
        run: |
          cargo test

      - name: Build release artifacts
        run: |
          # Set unique environment for each matrix job
          export CARGO_TARGET_DIR="target-${{ matrix.target }}"
          # Ensure cargo-dist is available (latest version with dist CLI)
          export PATH="${HOME}/.cargo/bin:$PATH"
          echo "Building release artifacts for target: ${{ matrix.target }}"
          echo "Matrix target value: '${{ matrix.target }}'"
          echo "CARGO_TARGET_DIR: $CARGO_TARGET_DIR"
          # Latest cargo-dist 0.30.0 requires cargo: prefix for targets with --artifacts
          dist build --target "cargo:${{ matrix.target }}" --artifacts all

      - name: Sign Linux packages
        env:
          LINUX_GPG_KEY: ${{ secrets.LINUX_GPG_KEY }}
          LINUX_GPG_PASSPHRASE: ${{ secrets.LINUX_GPG_PASSPHRASE }}
        run: |
          set -euo pipefail
          if [ -z "${LINUX_GPG_KEY:-}" ]; then
            echo "LINUX_GPG_KEY not set, skipping signing"
          else
            echo "$LINUX_GPG_KEY" | base64 --decode | gpg --batch --import
            KEY_ID=$(gpg --batch --list-secret-keys --with-colons | awk -F: '/^sec:/ {print $5; exit}')
            # Latest cargo-dist outputs to dist/<version>/ directory
            for pkg in dist/*.deb dist/*.rpm 2>/dev/null; do
              [ -e "$pkg" ] || continue
              echo "$LINUX_GPG_PASSPHRASE" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --detach-sign --armor "$pkg"
            done
            if [ -n "$KEY_ID" ]; then
              gpg --batch --armor --export "$KEY_ID" > dist/fukura-archive-keyring.gpg
            fi
          fi

      - name: Build APT repository skeleton
        run: |
          # Latest cargo-dist outputs to dist/<version>/ directory
          scripts/linux/build-apt-repo.sh dist stable amd64

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-dist-${{ matrix.target }}-${{ github.run_id }}
          path: dist
          if-no-files-found: error

  release:
    name: Publish GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          pattern: release-dist-*
          path: artifacts

      - name: Install cargo-dist
        run: cargo install cargo-dist --locked

      - name: Merge artifacts
        run: |
          mkdir -p dist
          for artifact_dir in artifacts/*/; do
            if [ -d "$artifact_dir" ]; then
              cp -r "$artifact_dir"/* dist/ || true
            fi
          done

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/boostbit-inc/fukura
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload release artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Ensure cargo-dist is available (latest version with dist CLI)
          export PATH="${HOME}/.cargo/bin:$PATH"
          echo "Uploading release artifacts for tag: ${{ github.ref_name }}"
          # Latest cargo-dist dist CLI upload (from default dist/ directory)
          dist upload --owner boostbit-inc --repo fukura --tag ${{ github.ref_name }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if release already exists
          if gh release view "${{ github.ref_name }}" >/dev/null 2>&1; then
            echo "Release ${{ github.ref_name }} already exists"
            exit 0
          fi
          
          # Create release with auto-generated notes
          gh release create "${{ github.ref_name }}" \
            --title "Fukura ${{ github.ref_name }}" \
            --generate-notes

      - name: Notify fukura-site of new release
        env:
          SITE_DISPATCH_TOKEN: ${{ secrets.SITE_DISPATCH_TOKEN }}
        run: |
          if [ -z "${SITE_DISPATCH_TOKEN:-}" ]; then
            echo "SITE_DISPATCH_TOKEN not set, skipping fukura-site notification"
            exit 0
          fi
          echo "Notifying fukura-site of new release: ${{ github.ref_name }}"
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${SITE_DISPATCH_TOKEN}" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/boostbit-inc/fukura-site/dispatches \
            -d '{"event_type":"release","client_payload":{"source":"boostbit-inc/fukura","version":"${{ github.ref_name }}","tag":"${{ github.ref_name }}"}}'
